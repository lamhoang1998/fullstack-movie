generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi" ]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model banners {
  bannerId   Int       @id @default(autoincrement())
  movieId    Int?
  banner     String?   @db.VarChar(255)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  movies     movies?   @relation(fields: [movieId], references: [movieId], onDelete: Cascade, onUpdate: NoAction, map: "banners_ibfk_1")

  @@index([movieId], map: "movieId")
}

model booking {
  bookingId  Int        @id @default(autoincrement())
  userId     Int?
  scheduleId Int?
  seatId     Int?
  created_at DateTime?  @default(now()) @db.Timestamp(0)
  updated_at DateTime?  @default(now()) @db.Timestamp(0)
  users      users?     @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade, map: "booking_ibfk_1")
  schedules  schedules? @relation(fields: [scheduleId], references: [scheduleId], onDelete: Cascade, onUpdate: NoAction, map: "booking_ibfk_2")
  seats      seats?     @relation(fields: [seatId], references: [seatId], onDelete: NoAction, onUpdate: NoAction, map: "booking_ibfk_3")

  @@index([scheduleId], map: "scheduleId")
  @@index([seatId], map: "seatId")
  @@index([userId], map: "userId")
}

model cinemachains {
  cinemaChainId   Int       @id @default(autoincrement())
  cinemaChainName String?   @db.VarChar(255)
  logo            String?   @db.VarChar(255)
  created_at      DateTime? @default(now()) @db.Timestamp(0)
  updated_at      DateTime? @default(now()) @db.Timestamp(0)
  cinemas         cinemas[]
}

model cinemarooms {
  cinemaRoomId   Int         @id @default(autoincrement())
  cinemaRoomName String?     @db.VarChar(255)
  cinemaId       Int?
  created_at     DateTime?   @default(now()) @db.Timestamp(0)
  updated_at     DateTime?   @default(now()) @db.Timestamp(0)
  cinemas        cinemas?    @relation(fields: [cinemaId], references: [cinemaId], onDelete: NoAction, onUpdate: NoAction, map: "cinemarooms_ibfk_1")
  schedules      schedules[]
  seats          seats[]

  @@index([cinemaId], map: "cinemaId")
}

model cinemas {
  cinemaId      Int           @id @default(autoincrement())
  cinemaName    String?       @db.VarChar(255)
  cinemaAddress String?       @db.VarChar(255)
  cinemaChainId Int?
  created_at    DateTime?     @default(now()) @db.Timestamp(0)
  updated_at    DateTime?     @default(now()) @db.Timestamp(0)
  cinemarooms   cinemarooms[]
  cinemachains  cinemachains? @relation(fields: [cinemaChainId], references: [cinemaChainId], onDelete: NoAction, onUpdate: NoAction, map: "cinemas_ibfk_1")

  @@index([cinemaChainId], map: "cinemaChainId")
}

model movies {
  movieId    Int         @id @default(autoincrement())
  movieName  String?     @db.VarChar(255)
  trailer    String?     @db.VarChar(255)
  images     String?     @db.VarChar(255)
  desc       String?     @db.VarChar(255)
  releaseDay DateTime?   @db.Date
  rate       Int?
  hot        Boolean?
  nowShowing Boolean?
  comingSoon Boolean?
  created_at DateTime?   @default(now()) @db.Timestamp(0)
  updated_at DateTime?   @default(now()) @db.Timestamp(0)
  banners    banners[]
  schedules  schedules[]
}

model schedules {
  scheduleId   Int          @id @default(autoincrement())
  cinemaRoomId Int?
  movieId      Int?
  showtime     DateTime?    @db.DateTime(0)
  ticketPrice  Int?
  created_at   DateTime?    @default(now()) @db.Timestamp(0)
  updated_at   DateTime?    @default(now()) @db.Timestamp(0)
  booking      booking[]
  cinemarooms  cinemarooms? @relation(fields: [cinemaRoomId], references: [cinemaRoomId], onDelete: Cascade, map: "schedules_ibfk_1")
  movies       movies?      @relation(fields: [movieId], references: [movieId], onDelete: Cascade, map: "schedules_ibfk_2")

  @@index([cinemaRoomId], map: "schedules_ibfk_1")
  @@index([movieId], map: "schedules_ibfk_2")
}

model seats {
  seatId       Int          @id @default(autoincrement())
  seatName     String?      @db.VarChar(255)
  seatType     String?      @db.VarChar(255)
  cinemaRoomId Int?
  created_at   DateTime?    @default(now()) @db.Timestamp(0)
  updated_at   DateTime?    @default(now()) @db.Timestamp(0)
  booking      booking[]
  cinemarooms  cinemarooms? @relation(fields: [cinemaRoomId], references: [cinemaRoomId], onDelete: NoAction, onUpdate: NoAction, map: "seats_ibfk_1")

  @@index([cinemaRoomId], map: "cinemaRoomId")
}

model users {
  userId      Int       @id @default(autoincrement())
  email       String?   @db.VarChar(255)
  fullName    String?   @db.VarChar(255)
  phoneNumber String?   @db.VarChar(255)
  password    String?   @db.VarChar(255)
  role_id     Int       @default(2)
  avatar      String?   @db.VarChar(255)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @db.Timestamp(0)
  booking     booking[]
  roles       roles     @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction, map: "users_ibfk_1")

  @@index([role_id], map: "role_id")
}

model roles {
  role_id     Int       @id @default(autoincrement())
  name        String?   @db.VarChar(255)
  description String?   @db.VarChar(255)
  is_active   Boolean?  @default(true)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @db.Timestamp(0)
  users       users[]
}
